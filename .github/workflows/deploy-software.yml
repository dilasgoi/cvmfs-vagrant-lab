name: Deploy HPC Software Stack

on:
  push:
    branches: [main]
    paths:
      - 'software-stack/**'
  workflow_dispatch:
    inputs:
      quarter:
        description: 'Target quarter (e.g., 2025.Q1)'
        required: false
        type: string
      compat_version:
        description: 'Compat layer version to use (e.g., 2024.2)'
        required: false
        default: 'current'
        type: string
  workflow_call:
    inputs:
      quarter:
        description: 'Target quarter (e.g., 2025.Q1)'
        required: false
        type: string
      compat_version:
        description: 'Compat layer version to use (e.g., 2024.2)'
        required: false
        default: 'current'
        type: string

env:
  CVMFS_REPOSITORY: software.lab.local

jobs:
  deploy-software:
    runs-on: [self-hosted, linux, cvmfs-publisher, "${{ matrix.arch }}"]
    strategy:
      matrix:
        include:
          - arch: x86-64-v3
            cvmfs_arch: intel/haswell
            is_primary: true
          - arch: x86-64-v4
            cvmfs_arch: intel/skylake_avx512
            is_primary: false
      max-parallel: 1
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set Quarter
        id: set-quarter
        run: |
          if [[ -n "${{ inputs.quarter }}" ]]; then
            QUARTER="${{ inputs.quarter }}"
          else
            QUARTER=$(date +"%Y.Q$(( ($(date +%-m)-1)/3+1 ))")
          fi
          echo "Quarter: $QUARTER"
          echo "QUARTER=$QUARTER" >> $GITHUB_ENV
      
      - name: Start CVMFS Transaction
        id: start-transaction
        run: |
          echo "Starting CVMFS transaction..."
          sudo -u vagrant cvmfs_server abort -f $CVMFS_REPOSITORY 2>/dev/null || true
          
          if ! sudo -u vagrant cvmfs_server transaction $CVMFS_REPOSITORY; then
            echo "ERROR: Failed to start transaction"
            exit 1
          fi
      
      - name: Create Directory Structure
        if: matrix.is_primary == true
        run: |
          QUARTER="${{ env.QUARTER }}"
          COMPAT_VERSION="${{ inputs.compat_version }}"
          STACK_BASE="/cvmfs/$CVMFS_REPOSITORY/software/versions/$QUARTER/linux/x86_64"
          
          echo "Creating directory structure for quarter $QUARTER..."
          
          # Create base versions directory
          sudo mkdir -p "/cvmfs/$CVMFS_REPOSITORY/software/versions"
          
          # Check if structure already exists
          if [[ ! -f "/cvmfs/$CVMFS_REPOSITORY/software/versions/$QUARTER/.deployed" ]]; then
            # Create quarter directory
            sudo mkdir -p "/cvmfs/$CVMFS_REPOSITORY/software/versions/$QUARTER"
            
            # Create architecture directories
            for arch_path in generic intel/haswell intel/skylake_avx512 intel/icelake amd/zen2 amd/zen3; do
              echo "Creating $arch_path..."
              sudo mkdir -p "$STACK_BASE/$arch_path/software"
              sudo mkdir -p "$STACK_BASE/$arch_path/modules/all"
              
              # Create architecture info
              cat > /tmp/arch_info_$$ << EOF
          Architecture: $arch_path
          Created: $(date)
          Quarter: $QUARTER
          Compat: $COMPAT_VERSION
          EOF
              sudo mv /tmp/arch_info_$$ "$STACK_BASE/$arch_path/ARCHITECTURE"
            done
            
            # Create symlinks and markers
            sudo rm -f "/cvmfs/$CVMFS_REPOSITORY/software/versions/current"
            sudo ln -s "$QUARTER" "/cvmfs/$CVMFS_REPOSITORY/software/versions/current"
            
            # Create compat version mapping
            echo "COMPAT_VERSION=\"$COMPAT_VERSION\"" | sudo tee "/cvmfs/$CVMFS_REPOSITORY/software/versions/$QUARTER/.compat-version"
            
            # Create deployment marker
            echo "$(date)" | sudo tee "/cvmfs/$CVMFS_REPOSITORY/software/versions/$QUARTER/.deployed"
            
            echo "Directory structure created successfully"
          else
            echo "Structure already exists for quarter $QUARTER"
          fi
      
      - name: Deploy Software Packages
        id: deploy-packages
        run: |
          CVMFS_ARCH="${{ matrix.cvmfs_arch }}"
          QUARTER="${{ env.QUARTER }}"
          COMPAT_VERSION="${{ inputs.compat_version }}"
          STACK_BASE="/cvmfs/$CVMFS_REPOSITORY/software/versions/$QUARTER/linux/x86_64"
          STACK_PATH="$STACK_BASE/$CVMFS_ARCH"
          
          echo "Deploying software to $CVMFS_ARCH..."
          
          # Process EasyBuild configs
          EB_COUNT=0
          FAILED_COUNT=0
          
          for eb in software-stack/easyconfigs/*.eb; do
            if [[ -f "$eb" ]]; then
              echo "Processing $(basename $eb)..."
              
              # Extract software info
              EB_NAME=$(basename "$eb" .eb)
              SOFTWARE=$(echo "$EB_NAME" | cut -d- -f1)
              VERSION=$(echo "$EB_NAME" | cut -d- -f2)
              TOOLCHAIN=$(echo "$EB_NAME" | cut -d- -f3,4 || echo "system")
              
              # Create installation directory
              INSTALL_DIR="$STACK_PATH/software/$SOFTWARE/$VERSION-$TOOLCHAIN"
              
              if sudo mkdir -p "$INSTALL_DIR/bin"; then
                # Create mock binary
                cat > /tmp/binary_$$ << EOFBIN
          #!/bin/bash
          echo "$SOFTWARE version $VERSION"
          echo "Architecture: $CVMFS_ARCH (\$(hostname))"
          echo "Toolchain: $TOOLCHAIN"
          echo "Quarter: $QUARTER"
          echo "Using Gentoo Prefix: /cvmfs/$CVMFS_REPOSITORY/compat/gentoo-prefix/$COMPAT_VERSION"
          EOFBIN
                
                if sudo mv /tmp/binary_$$ "$INSTALL_DIR/bin/$SOFTWARE" && \
                   sudo chmod +x "$INSTALL_DIR/bin/$SOFTWARE"; then
                  
                  # Create module file
                  MODULE_DIR="$STACK_PATH/modules/all/$SOFTWARE"
                  sudo mkdir -p "$MODULE_DIR"
                  
                  cat > /tmp/module_$$ << EOFMOD
          -- -*- lua -*-
          help([[$SOFTWARE version $VERSION]])
          whatis("Name: $SOFTWARE")
          whatis("Version: $VERSION")
          whatis("Architecture: $CVMFS_ARCH")
          
          -- Set up Gentoo Prefix environment
          local compat_version = "$COMPAT_VERSION"
          local eprefix = "/cvmfs/$CVMFS_REPOSITORY/compat/gentoo-prefix/" .. compat_version .. "/linux/x86_64/$CVMFS_ARCH"
          prepend_path("PATH", pathJoin(eprefix, "usr/bin"))
          prepend_path("LD_LIBRARY_PATH", pathJoin(eprefix, "usr/lib64"))
          
          -- Software paths
          local root = "$INSTALL_DIR"
          prepend_path("PATH", pathJoin(root, "bin"))
          setenv("${SOFTWARE^^}_ROOT", root)
          setenv("EPREFIX", eprefix)
          EOFMOD
                  
                  if sudo mv /tmp/module_$$ "$MODULE_DIR/$VERSION-$TOOLCHAIN.lua"; then
                    ((EB_COUNT++))
                    echo "Successfully deployed $SOFTWARE"
                  else
                    ((FAILED_COUNT++))
                    echo "Failed to create module for $SOFTWARE"
                  fi
                else
                  ((FAILED_COUNT++))
                  echo "Failed to create binary for $SOFTWARE"
                fi
              else
                ((FAILED_COUNT++))
                echo "Failed to create directory for $SOFTWARE"
              fi
            fi
          done
          
          echo "Summary: Deployed $EB_COUNT packages, $FAILED_COUNT failed"
          echo "EB_COUNT=$EB_COUNT" >> $GITHUB_ENV
          echo "FAILED_COUNT=$FAILED_COUNT" >> $GITHUB_ENV
      
      - name: Publish CVMFS Changes
        if: always() && steps.start-transaction.outcome == 'success'
        run: |
          echo "Publishing changes..."
          if sudo -u vagrant cvmfs_server publish $CVMFS_REPOSITORY; then
            echo "Successfully published!"
          else
            echo "ERROR: Publish failed, aborting transaction"
            sudo -u vagrant cvmfs_server abort -f $CVMFS_REPOSITORY
            exit 1
          fi
      
      - name: Abort on Failure
        if: failure() && steps.start-transaction.outcome == 'success'
        run: |
          echo "Aborting CVMFS transaction due to failure..."
          sudo -u vagrant cvmfs_server abort -f $CVMFS_REPOSITORY || true

  summary:
    needs: deploy-software
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## HPC Software Stack Deployment
          
          **Status:** ${{ needs.deploy-software.result }}
          
          ### Deployment Details
          - Quarter: ${{ env.QUARTER || 'Auto-detected' }}
          - Compat Version: ${{ inputs.compat_version }}
          
          EOF
          
          if [[ "${{ needs.deploy-software.result }}" == "success" ]]; then
            echo "✅ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment failed. Check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi
