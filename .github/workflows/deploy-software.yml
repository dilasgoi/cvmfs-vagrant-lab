name: Deploy HPC Software Stack

on:
  push:
    branches: [dev]
    paths:
      - 'software-stack/**'
  workflow_dispatch:
    inputs:
      quarter:
        description: 'Target quarter (e.g., 2025.Q1)'
        required: false
        type: string

env:
  CVMFS_REPOSITORY: software.lab.local

jobs:
  deploy-software:
    runs-on: [self-hosted, linux, cvmfs-publisher, "${{ matrix.arch }}"]
    strategy:
      matrix:
        include:
          - arch: x86-64-v3
            cvmfs_arch: intel/haswell
            is_primary: true  # This publisher creates structure
          - arch: x86-64-v4
            cvmfs_arch: intel/skylake_avx512
            is_primary: false
      max-parallel: 1  # Sequential to avoid conflicts
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set Quarter
        id: set-quarter
        run: |
          if [[ -n "${{ inputs.quarter }}" ]]; then
            QUARTER="${{ inputs.quarter }}"
          else
            QUARTER=$(date +"%Y.Q$(( ($(date +%-m)-1)/3+1 ))")
          fi
          echo "Quarter: $QUARTER"
          echo "QUARTER=$QUARTER" >> $GITHUB_ENV
      
      - name: Deploy to CVMFS
        run: |
          CVMFS_ARCH="${{ matrix.cvmfs_arch }}"
          IS_PRIMARY="${{ matrix.is_primary }}"
          STACK_BASE="/cvmfs/$CVMFS_REPOSITORY/versions/$QUARTER/software/linux/x86_64"
          
          echo "üöÄ Publisher: $(hostname)"
          echo "üìÖ Quarter: $QUARTER"
          echo "üèóÔ∏è Architecture: $CVMFS_ARCH"
          
          # Start transaction
          echo "Starting CVMFS transaction..."
          sudo -u vagrant cvmfs_server abort -f $CVMFS_REPOSITORY 2>/dev/null || true
          
          if ! sudo -u vagrant cvmfs_server transaction $CVMFS_REPOSITORY; then
            echo "‚ùå Failed to start transaction"
            exit 1
          fi
          
          # If primary publisher, create the full directory structure
          if [[ "$IS_PRIMARY" == "true" ]]; then
            echo "üìÅ Creating directory structure..."
            
            # Check if structure already exists
            if [[ ! -f "/cvmfs/$CVMFS_REPOSITORY/versions/$QUARTER/.deployed" ]]; then
              # Create all architecture directories
              for arch_path in generic intel/haswell intel/skylake_avx512 intel/icelake amd/zen2 amd/zen3; do
                echo "  Creating $arch_path..."
                sudo mkdir -p "$STACK_BASE/$arch_path/software"
                sudo mkdir -p "$STACK_BASE/$arch_path/modules/all"
                
                # Create architecture info
                cat << 'ARCH_EOF' | sudo tee "$STACK_BASE/$arch_path/ARCHITECTURE" > /dev/null
Architecture: $arch_path
Created: $(date)
Quarter: $QUARTER
ARCH_EOF
              done
              
              # Create current symlink
              sudo rm -f "/cvmfs/$CVMFS_REPOSITORY/versions/current"
              sudo ln -s "$QUARTER" "/cvmfs/$CVMFS_REPOSITORY/versions/current"
              
              # Create deployment marker
              echo "$(date)" | sudo tee "/cvmfs/$CVMFS_REPOSITORY/versions/$QUARTER/.deployed" > /dev/null
              
              echo "‚úÖ Directory structure created"
            else
              echo "‚úì Structure already exists"
            fi
          fi
          
          # Deploy software for this architecture
          echo "üì¶ Deploying software to $CVMFS_ARCH..."
          STACK_PATH="$STACK_BASE/$CVMFS_ARCH"
          
          # Process EasyBuild configs
          EB_COUNT=0
          for eb in software-stack/easyconfigs/*.eb; do
            if [[ -f "$eb" ]]; then
              echo "  Processing $(basename $eb)..."
              
              # Extract software info
              EB_NAME=$(basename "$eb" .eb)
              SOFTWARE=$(echo "$EB_NAME" | cut -d- -f1)
              VERSION=$(echo "$EB_NAME" | cut -d- -f2)
              TOOLCHAIN=$(echo "$EB_NAME" | cut -d- -f3,4 || echo "system")
              
              # Create installation
              INSTALL_DIR="$STACK_PATH/software/$SOFTWARE/$VERSION-$TOOLCHAIN"
              sudo mkdir -p "$INSTALL_DIR/bin"
              
              # Create mock binary
              cat << 'BINARY_EOF' | sudo tee "$INSTALL_DIR/bin/$SOFTWARE" > /dev/null
#!/bin/bash
echo "$SOFTWARE version $VERSION"
echo "Architecture: $CVMFS_ARCH ($(hostname))"
echo "Toolchain: $TOOLCHAIN"
echo "Quarter: $QUARTER"
BINARY_EOF
              sudo chmod +x "$INSTALL_DIR/bin/$SOFTWARE"
              
              # Create module file
              MODULE_DIR="$STACK_PATH/modules/all/$SOFTWARE"
              sudo mkdir -p "$MODULE_DIR"
              
              cat << 'MODULE_EOF' | sudo tee "$MODULE_DIR/$VERSION-$TOOLCHAIN.lua" > /dev/null
-- -*- lua -*-
help([[$SOFTWARE version $VERSION]])
whatis("Name: $SOFTWARE")
whatis("Version: $VERSION")
whatis("Architecture: $CVMFS_ARCH")

local root = "$INSTALL_DIR"
prepend_path("PATH", pathJoin(root, "bin"))
setenv("${SOFTWARE^^}_ROOT", root)
MODULE_EOF
              
              ((EB_COUNT++))
            fi
          done
          
          echo "‚úì Deployed $EB_COUNT packages to $CVMFS_ARCH"
          
          # Publish transaction
          echo "Publishing changes..."
          if sudo -u vagrant cvmfs_server publish $CVMFS_REPOSITORY; then
            echo "‚úÖ Successfully published!"
          else
            echo "‚ùå Publish failed"
            sudo -u vagrant cvmfs_server abort -f $CVMFS_REPOSITORY
            exit 1
          fi

  summary:
    needs: deploy-software
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## üì¶ HPC Software Stack Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-software.result }}" == "success" ]]; then
            echo "### ‚úÖ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The software stack has been deployed with:" >> $GITHUB_STEP_SUMMARY
            echo "- Directory structure for all architectures" >> $GITHUB_STEP_SUMMARY
            echo "- Software packages from EasyBuild configs" >> $GITHUB_STEP_SUMMARY
            echo "- Module files for each package" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
          fi
