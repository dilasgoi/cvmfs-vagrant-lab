name: Deploy Compatibility Layer

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Compat layer version (e.g., 2024.2)'
        required: true
        type: string
      architectures:
        description: 'Architectures to build (comma-separated, or "all")'
        required: false
        default: 'all'
        type: string
      make_current:
        description: 'Set as current version after deployment'
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      version:
        description: 'Compat layer version (e.g., 2024.2)'
        required: true
        type: string
      architectures:
        description: 'Architectures to build (comma-separated, or "all")'
        required: false
        default: 'all'
        type: string
      make_current:
        description: 'Set as current version after deployment'
        required: false
        default: true
        type: boolean

env:
  CVMFS_REPOSITORY: software.lab.local
  COMPAT_BASE: /cvmfs/software.lab.local/compat/gentoo-prefix

jobs:
  deploy-compat:
    runs-on: [self-hosted, linux, cvmfs-publisher, "${{ matrix.arch }}"]
    strategy:
      matrix:
        include:
          - arch: x86-64-v3
            cvmfs_arch: intel/haswell
            cflags: "-march=haswell -O2 -pipe"
            cpu_features: "AVX2 FMA BMI BMI2"
          - arch: x86-64-v4
            cvmfs_arch: intel/skylake_avx512
            cflags: "-march=skylake-avx512 -O2 -pipe"
            cpu_features: "AVX512F AVX512CD AVX512BW AVX512DQ AVX512VL"
      max-parallel: 1  # Sequential to avoid conflicts
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate Version Format
        run: |
          VERSION="${{ inputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]{4}\.[0-9]+$ ]]; then
            echo "ERROR: Version must be in format YYYY.N (e.g., 2024.2)"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Check if should build this architecture
        id: check-build
        run: |
          ARCH_LIST="${{ inputs.architectures }}"
          CURRENT_ARCH="${{ matrix.cvmfs_arch }}"
          
          if [[ "$ARCH_LIST" == "all" ]] || echo "$ARCH_LIST" | grep -q "$CURRENT_ARCH"; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy Gentoo Prefix
        if: steps.check-build.outputs.should_build == 'true'
        run: |
          set +e  # Don't exit on error immediately
          
          CVMFS_ARCH="${{ matrix.cvmfs_arch }}"
          CFLAGS="${{ matrix.cflags }}"
          CPU_FEATURES="${{ matrix.cpu_features }}"
          VERSION="${{ inputs.version }}"
          PREFIX_ROOT="$COMPAT_BASE/$VERSION/linux/x86_64"
          
          echo "Deploying Gentoo Prefix"
          echo "Version: $VERSION"
          echo "Architecture: $CVMFS_ARCH"
          echo "Optimization: $CFLAGS"
          echo "CPU Features: $CPU_FEATURES"
          
          # Start transaction
          echo "Starting CVMFS transaction..."
          sudo -u vagrant cvmfs_server abort -f $CVMFS_REPOSITORY 2>/dev/null || true
          
          if ! sudo -u vagrant cvmfs_server transaction $CVMFS_REPOSITORY; then
            echo "ERROR: Failed to start transaction"
            exit 1
          fi
          
          # Create prefix directory structure
          PREFIX_PATH="$PREFIX_ROOT/$CVMFS_ARCH"
          echo "Creating Gentoo Prefix at: $PREFIX_PATH"
          
          sudo mkdir -p "$PREFIX_PATH"
          
          # Check if prefix already exists
          if [[ -f "$PREFIX_PATH/.prefix_complete" ]]; then
            echo "Gentoo Prefix already exists for $CVMFS_ARCH"
            
            # Just update if exists
            echo "Updating existing prefix..."
            bash compat-stack/updates/update-prefix.sh "$PREFIX_PATH" "$CVMFS_ARCH" "$CFLAGS"
          else
            echo "Bootstrapping new Gentoo Prefix for $CVMFS_ARCH"
            
            # Run bootstrap script
            bash compat-stack/bootstrap/bootstrap-prefix.sh \
              "$PREFIX_PATH" \
              "$CVMFS_ARCH" \
              "$CFLAGS" \
              "$CPU_FEATURES"
          fi
          
          # Create version metadata
          echo "Creating version metadata..."
          cat << EOF | sudo tee "$PREFIX_ROOT/.version" > /dev/null
version: $VERSION
created: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
architectures:
$(for arch in generic intel/haswell intel/skylake_avx512 intel/icelake amd/zen2 amd/zen3; do
  if [[ -d "$PREFIX_ROOT/$arch" ]]; then
    echo "  - $arch"
  fi
done)
EOF
          
          # Update current symlink if requested
          if [[ "${{ inputs.make_current }}" == "true" ]]; then
            echo "Updating current symlink..."
            sudo rm -f "$COMPAT_BASE/current"
            sudo ln -s "$VERSION" "$COMPAT_BASE/current"
          fi
          
          # Run tests
          echo "Running validation tests..."
          if bash compat-stack/tests/test-prefix.sh "$PREFIX_PATH"; then
            echo "SUCCESS: All tests passed"
          else
            echo "WARNING: Some tests failed"
          fi
          
          # Publish transaction
          echo "Publishing changes..."
          if sudo -u vagrant cvmfs_server publish $CVMFS_REPOSITORY; then
            echo "Successfully published!"
            exit 0
          else
            echo "ERROR: Publish failed"
            sudo -u vagrant cvmfs_server abort -f $CVMFS_REPOSITORY
            exit 1
          fi

  summary:
    needs: deploy-compat
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## Compatibility Layer Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-compat.result }}" == "success" ]]; then
            echo "### Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Gentoo Prefix has been deployed to:" >> $GITHUB_STEP_SUMMARY
            echo "- Path: \`/cvmfs/software.lab.local/compat/gentoo-prefix/${{ inputs.version }}/\`" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ inputs.make_current }}" == "true" ]]; then
              echo "- Set as current version" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### Deployment Failed" >> $GITHUB_STEP_SUMMARY
          fi
